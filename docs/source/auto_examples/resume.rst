
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/resume.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_resume.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_resume.py:


Coming back after model training
================================

.. GENERATED FROM PYTHON SOURCE LINES 7-17

After training a model, you might want to test its performance, make
predictions or do whatever you want with it.

.. note::
    This example assummes:
        * `PyTorch Lightning checkpoints
          <https://lightning.ai/docs/pytorch/stable/common/checkpointing_basic.html#lightningmodule-from-checkpoint>`_
          are enabled during training.
        * Training was performed with AIdsorb :doc:`../cli` or :ref:`AIdsorb +
          PyTorch Lightning <aidsorb_with_pytorch_and_lightning>`.

.. GENERATED FROM PYTHON SOURCE LINES 17-26

.. code-block:: Python


    import yaml
    import torch
    import lightning as L
    from lightning.pytorch.cli import LightningCLI, LightningArgumentParser
    from aidsorb.datamodules import PCDDataModule
    from aidsorb.litmodels import PointLit
    from aidsorb.visualize import draw_pcd


.. GENERATED FROM PYTHON SOURCE LINES 27-36

The following function let us recreate:

* Trainer
* LightningModule (litmodel)
* Datamodule

with the same settings as in the ``.yaml`` configuration file. For more
information ðŸ‘‰ `here
<https://github.com/Lightning-AI/pytorch-lightning/discussions/10363#discussioncomment-2326235>`_.

.. GENERATED FROM PYTHON SOURCE LINES 36-65

.. code-block:: Python


    def load_from_config(filename):
        r"""
        Load configuration, trainer, model and datamodule from a ``.yaml`` file.

        .. note::
            You are responsible for restoring the model's state (the weights of the model).

        Parameters
        ----------
        filename: str
            Absolute or relative path to the ``.yaml`` configuration file.
        """
        with open(filename, 'r') as f:
            config_dict = yaml.safe_load(f)

        config_dict['trainer']['logger'] = False
        del config_dict['seed_everything'], config_dict['ckpt_path']

        parser = LightningArgumentParser()
        parser.add_class_arguments(PointLit, 'model', fail_untyped=False)
        parser.add_class_arguments(PCDDataModule, 'data', fail_untyped=False)
        parser.add_class_arguments(L.Trainer, 'trainer', fail_untyped=False)

        config = parser.parse_object(config_dict)
        objects = parser.instantiate_classes(config)

        return config, objects.trainer, objects.model, objects.data


.. GENERATED FROM PYTHON SOURCE LINES 66-69

.. code-block:: Python


    config, trainer, litmodel, dm = load_from_config('path/to/logs/config.yaml')


.. GENERATED FROM PYTHON SOURCE LINES 72-74

Restoring model's state 
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 74-78

.. code-block:: Python


    ckpt = torch.load('path/to/checkpoints/checkpoint.ckpt')
    model_weights = {k: v for k, v in ckpt['state_dict'].items() if k.startswith('model.')}


.. GENERATED FROM PYTHON SOURCE LINES 79-85

.. code-block:: Python


    # Due to lazy initialization we need to pass a dummy input with correct shape.
    in_channels = 5  # For xyz + Z + 1 additional feature.
    x = torch.randn(32, in_channels, 100)
    litmodel(x);


.. GENERATED FROM PYTHON SOURCE LINES 86-90

.. code-block:: Python


    # Load back the weights.
    litmodel.load_state_dict(model_weights)


.. GENERATED FROM PYTHON SOURCE LINES 91-97

.. code-block:: Python


    # Set the model in inference mode.
    litmodel.eval()
    litmodel.training



.. GENERATED FROM PYTHON SOURCE LINES 98-100

Measure performance and make predictions
----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 100-104

.. code-block:: Python


    # Measure performance on test set.
    trainer.test(litmodel, dm)


.. GENERATED FROM PYTHON SOURCE LINES 105-111

.. code-block:: Python


    # Predict on the test set.
    y_pred = torch.cat(trainer.predict(litmodel, dm.test_dataloader()))

    # Predict on the train set.
    y_pred = torch.cat(trainer.predict(litmodel, dm.train_dataloader()))


.. _sphx_glr_download_auto_examples_resume.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: resume.ipynb <resume.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: resume.py <resume.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
